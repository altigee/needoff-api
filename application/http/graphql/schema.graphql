schema {
  query: Query
  mutation: Mutation
}

type AddMember {
  ok: Boolean
}

type AddUserRole {
  ok: Boolean
}

type AddWorkspaceDate {
  ok: Boolean
  workspaceDate: WorkspaceDate
}

type ApproveDayOff {
  ok: Boolean
}

type Balance {
  leftPaidLeaves: Int
  leftUnpaidLeaves: Int
  leftSickLeaves: Int
  totalPaidLeaves: Int
  totalUnpaidLeaves: Int
  totalSickLeaves: Int
}

type CreateDayOff {
  ok: Boolean
  dayOff: DayOff
  errors: [String]
  warnings: [String]
  notes: [String]
}

type CreateWorkspace {
  ok: Boolean
  ws: Workspace
}

scalar Date

scalar DateTime

type DayOff {
  id: ID!
  userId: Int!
  approvedById: Int
  leaveType: LeaveTypes!
  startDate: String!
  endDate: String!
  workspaceId: Int!
  comment: String
  user: Profile
  approvedBy: Profile
  workspace: Workspace
}

enum LeaveTypes {
  SICK_LEAVE
  VACATION_PAID
  VACATION_UNPAID
  WFH
}

type Login {
  ok: Boolean
  accessToken: String
  refreshToken: String
}

type Mutation {
  login(email: String, password: String): Login
  register(email: String, password: String, userData: UserData): Register
  createDayOff(comment: String, endDate: Date, startDate: Date, type: String, workspaceId: Int): CreateDayOff
  approveDayOff(dayOffId: Int): ApproveDayOff
  createWorkspace(description: String, members: [String], name: String): CreateWorkspace
  updateWorkspace(description: String, name: String, wsId: Int): UpdateWorkspace
  addWorkspaceMember(email: String, startDate: Date, wsId: Int): AddMember
  updateWorkspaceMember(startDate: Date, userId: Int, wsId: Int): UpdateMember
  removeWorkspaceMember(email: String, wsId: Int): RemoveMember
  addUserRole(role: String, userId: Int, wsId: Int): AddUserRole
  removeUserRole(role: String, userId: Int, wsId: Int): RemoveUserRole
  addWorkspaceDate(date: Date, isOfficialHoliday: Boolean, name: String, wsId: Int): AddWorkspaceDate
  removeWorkspaceDate(id: Int): RemoveWorkspaceDate
  setWorkspaceRule(rule: String, type: String, wsId: Int): SetWorkspaceRule
}

type Profile {
  userId: ID!
  firstName: String
  lastName: String
  position: String
  phone: String
  email: String!
  user: User
}

type Query {
  userByName(email: String!): User
  myLeaves(workspaceId: Int!): [DayOff]
  myBalance(workspaceId: Int!): Balance
  balanceByUser(userId: Int!, workspaceId: Int!): Balance
  profile: Profile
  myWorkspaces: [Workspace]
  workspaceById(workspaceId: Int!): Workspace
  workspaceOwner(workspaceId: Int!): Profile
  workspaceInvitations(workspaceId: Int!): [WorkspaceInvitation]
  workspaceMembers(workspaceId: Int!): [WorkspaceUser]
  workspaceDates(workspaceId: Int!): [WorkspaceDate]
  teamCalendar(workspaceId: Int!): [DayOff]
  dayOffsForApproval(workspaceId: Int!): [DayOff]
}

type Register {
  ok: Boolean
  userId: Int
  accessToken: String
  refreshToken: String
}

type RemoveMember {
  ok: Boolean
}

type RemoveUserRole {
  ok: Boolean
}

type RemoveWorkspaceDate {
  ok: Boolean
}

type SetWorkspaceRule {
  ok: Boolean
}

type UpdateMember {
  ok: Boolean
  member: WorkspaceUser
}

type UpdateWorkspace {
  ok: Boolean
}

type User {
  id: ID!
  createdTime: DateTime!
  email: String!
}

input UserData {
  firstName: String
  lastName: String
}

type Workspace {
  id: ID!
  name: String!
  description: String
  invitationLinkToken: String
}

type WorkspaceDate {
  id: ID!
  name: String!
  wsId: Int
  date: String!
  isOfficialHoliday: Boolean
}

type WorkspaceInvitation {
  id: ID!
  email: String!
  wsId: Int!
  status: WorkspaceInvitationStatus!
  startDate: String
}

enum WorkspaceInvitationStatus {
  ACCEPTED
  PENDING
  REVOKED
}

type WorkspaceUser {
  userId: ID!
  wsId: ID!
  startDate: String!
  profile: Profile
  balance: Balance
}
